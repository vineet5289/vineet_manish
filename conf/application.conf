# This is the main configuration file for the application.
# ~~~~~

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions.
#
# This must be changed for production, but we recommend not changing it in this file.
#
# See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
play.crypto.secret = "changeme"

# The application languages
# ~~~~~
play.i18n.langs = [ "en" ]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# play.http.router = my.application.Routes

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
# https://www.playframework.com/documentation/2.0/SettingsJDBC
# db.default.driver=org.h2.Driver
# db.default.url="jdbc:h2:mem:play"
 db.srp.driver=com.mysql.jdbc.Driver
 db.srp.url="jdbc:mysql://localhost:3306/school_management_system?useSSL=false&allowMultiQueries=true"
 db.srp.username=root
 db.srp.password=""
 db.srp.autocommit=false
 db.srp.isolation=READ_COMMITTED
 db.srp.partitionCount=3
 db.srp.maxConnectionsPerPartition=10
 db.srp.minConnectionsPerPartition=5
 db.srp.acquireIncrement=1
 db.srp.acquireRetryAttempts=10
 db.srp.acquireRetryDelay=5 seconds
 db.srp.connectionTimeout=1 second
 db.srp.idleMaxAge=10 minute
 db.srp.idleConnectionTestPeriod=5 minutes
 db.srp.logStatements=true
 db.srp.maxConnectionAge=1 hour

# Evolutions
# ~~~~~
# You can disable evolutions if needed
# play.evolutions.enabled=false

# You can disable evolutions for a specific datasource if necessary
# play.evolutions.db.default.enabled=false

jpa.srp=defaultPersistenceUnit
evolutionplugin=enabled

# Root logger:
logger.root=ERROR

# Logger used by the framework:
logger.play=INFO

# Logger provided to your application:
logger.application=DEBUG

redis.uri = "redis://127.0.0.1:6379"
redis.uri = ${?redis.provideduri}
redis.max.connection = ${?redis.maxconnections}

#rabbit-mq configuration
rabbitmq.uri="amqp://127.0.0.1"
rabbitmq.uri=${?rabbitmq.provideduri}

play{
  modules {
    enabled += "play.api.libs.mailer.MailerModule"
    #enabled += "play.db.DBModule"
    #enabled += "play.api.db.HikariCPModule"
    #enabled += "schdule_job_on_start_up.SchduleSchoolApprovalJob"
    #enabled += "modules.DependencyModule"
    #enabled += "modules.RedisModule"
    enabled += "modules.SqlModule"
  }

  mailer {
	 # host (mandatory)
	  host=smtp.gmail.com
	  #port (defaults to 25, (ssl for 465, 8465))
	  port=465
	  #ssl (defaults to no)
	  ssl=yes
	  #tls (defaults to no)
	  tls=no
	  #user (optional)
	  user="srpceo2016@gmail.com"
	  #password (optional)
	  password="manishvineetvivek"
	  #debug (defaults to no, to take effect you also need to set the log level to "DEBUG" for the application logger)
	  debug=yes
	  #timeout (defaults to 60s in milliseconds)
	  #connectiontimeout (defaults to 60s in milliseconds)
	  #mock (defaults to no, will only log all the email properties instead of sending an email)
  }

  myapp1 {
  	actor-system = "alert-actor"
  	fork-join-executor {
    # Settings this to 1 instead of 3 seems to improve performance.
    parallelism-factor = 1.0
    parallelism-max = 24
    # Setting this to LIFO changes the fork-join-executor
    # to use a stack discipline for task scheduling. This usually
    # improves throughput at the cost of possibly increasing
    # latency and risking task starvation (which should be rare).
    task-peeking-mode = LIFO
    }
  }
}

application.global=commons.Global
